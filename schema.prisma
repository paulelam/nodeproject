generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id                Int       @id @default(autoincrement())
  telephone         String    @unique
  mot_de_passe      String
  nom               String
  prenom            String
  date_creation     DateTime? @default(now())
  date_modification DateTime?
}

model adresser {
  id_reclammation      BigInt
  id_service           Int
  date_adresser        DateTime?      @db.Date
  heure_adresser       DateTime?      @db.Time(0)
  statut_adresser      String?        @db.VarChar(255)
  commentaire_adresser String?        @db.Text
  reclammation         reclammation   @relation(fields: [id_reclammation], references: [id_reclammation], onDelete: NoAction, onUpdate: NoAction, map: "fk_adresser")
  serviceinterne       serviceinterne @relation(fields: [id_service], references: [id_service], onDelete: NoAction, onUpdate: NoAction, map: "fk_adresser2")

  @@id([id_reclammation, id_service])
  @@index([id_service], map: "fk_adresser2")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model affecter {
  numrh             Int
  numservice        Int
  debut_affectation DateTime? @db.Date
  fin_affectation   DateTime? @db.Date
  rhumaines         rhumaines @relation(fields: [numrh], references: [numrh], onDelete: NoAction, onUpdate: NoAction, map: "fk_affecter")
  services          services  @relation(fields: [numservice], references: [numservice], onDelete: NoAction, onUpdate: NoAction, map: "fk_affecter2")

  @@id([numrh, numservice])
  @@index([numservice], map: "fk_affecter2")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model avoircompetences {
  numrh         Int
  numcompetence Int
  niveau        String?     @db.VarChar(255)
  debutprof     DateTime?   @db.Date
  rhumaines     rhumaines   @relation(fields: [numrh], references: [numrh], onDelete: NoAction, onUpdate: NoAction, map: "fk_avoircompetences")
  competences   competences @relation(fields: [numcompetence], references: [numcompetence], onDelete: NoAction, onUpdate: NoAction, map: "fk_avoircompetences2")

  @@id([numrh, numcompetence])
  @@index([numcompetence], map: "fk_avoircompetences2")
}

model avoirmetier {
  numrh          Int
  nummetier      Int
  rhumainesNumrh Int?
  metiers        metiers    @relation(fields: [nummetier], references: [nummetier])
  rhumaines      rhumaines? @relation(fields: [rhumainesNumrh], references: [numrh])

  @@id([numrh, nummetier])
  @@index([rhumainesNumrh], map: "avoirmetier_rhumainesNumrh_fkey")
  @@index([nummetier], map: "fk_avoirmetier2")
}

model cartegpx {
  numcartegopaxe                                              Int                @id @default(autoincrement())
  numrechargement                                             Int?
  numbatch                                                    Decimal?           @db.Decimal(14, 0)
  dateval                                                     DateTime?          @db.DateTime(0)
  valeur                                                      Decimal?           @db.Decimal(6, 0)
  operationrecharg_cartegpx_numrechargementTooperationrecharg operationrecharg?  @relation("cartegpx_numrechargementTooperationrecharg", fields: [numrechargement], references: [numrechargement], onDelete: NoAction, onUpdate: NoAction, map: "fk_recharger2")
  operationrecharg_operationrecharg_numcartegopaxeTocartegpx  operationrecharg[] @relation("operationrecharg_numcartegopaxeTocartegpx")

  @@index([numrechargement], map: "fk_recharger2")
}

model certifications {
  numcertification  Int       @id @default(autoincrement())
  numorganisme      Int
  libcertifications String?   @db.VarChar(255)
  organisme         organisme @relation(fields: [numorganisme], references: [numorganisme], onDelete: NoAction, onUpdate: NoAction, map: "fk_accorder")

  @@index([numorganisme], map: "fk_accorder")
}

model certifier {
  numrh           Int
  numcerification Int
  datecertif      DateTime? @db.Date
  rhumaines       rhumaines @relation(fields: [numrh], references: [numrh], onDelete: NoAction, onUpdate: NoAction, map: "fk_certifier")

  @@id([numrh, numcerification])
  @@index([numcerification], map: "fk_certifier2")
}

model clauses {
  idclauses       Int               @id @default(autoincrement())
  numarticle      Int
  article         String?           @db.Text
  contenirclauses contenirclauses[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model client {
  numclient                Int                @id @default(autoincrement())
  numtypeclient            Int
  numcompte                Int
  coordonnees_client       String?            @db.VarChar(255)
  nuncnicc                 String?            @db.VarChar(255)
  nomclient                String?            @db.VarChar(255)
  nomcompletclient         String?            @db.VarChar(255)
  celcli                   String?            @db.VarChar(255)
  emailcli                 String?            @db.VarChar(255)
  date_inscription_client  DateTime           @db.Date
  heure_inscription_client DateTime           @db.Time(0)
  compteId                 Int
  typeclient               typeclient         @relation(fields: [numtypeclient], references: [numtypeclient], onDelete: NoAction, onUpdate: NoAction, map: "fk_etretype")
  commenter                commenter[]
  compte                   compte[]
  detailsclientpro         detailsclientpro[]
  reclammation             reclammation[]
  services                 services[]

  @@index([numcompte], map: "fk_connectercli2")
  @@index([numtypeclient], map: "fk_etretype")
}

model cni {
  numcni       Int      @id @default(autoincrement())
  rectoUrl     String
  versoUrl     String
  dateCreation DateTime @default(now())
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model commentairesrh {
  numcommentaire Int         @id @default(autoincrement())
  numrh          Int
  commentrh      String      @db.Text
  statutvalid    Boolean?
  rhumaines      rhumaines   @relation(fields: [numrh], references: [numrh], onDelete: NoAction, onUpdate: NoAction, map: "fk_sur")
  commenter      commenter[]

  @@index([numrh], map: "fk_sur")
}

model commenter {
  numcommentaire Int
  numclient      Int
  commentairesrh commentairesrh @relation(fields: [numcommentaire], references: [numcommentaire], onDelete: NoAction, onUpdate: NoAction, map: "fk_commenter")
  client         client         @relation(fields: [numclient], references: [numclient], onDelete: NoAction, onUpdate: NoAction, map: "fk_commenter2")

  @@id([numcommentaire, numclient])
  @@index([numclient], map: "fk_commenter2")
}

model competences {
  numcompetence    Int                @id @default(autoincrement())
  libcompetence    String?            @db.VarChar(255)
  nummetier        Int
  avoircompetences avoircompetences[]
  exiger           exiger[]

  @@index([nummetier], map: "nummetier")
}

model compte {
  numcompte        Int                @id @default(autoincrement())
  numrh            Int?
  numclient        Int?
  login            String?            @db.VarChar(255)
  motdepasse       String?            @db.VarChar(255)
  datecre          DateTime?          @db.DateTime(0)
  statutcompte     String?            @db.VarChar(255)
  client           client?            @relation(fields: [numclient], references: [numclient], onDelete: NoAction, onUpdate: NoAction, map: "fk_connectercli")
  rhumaines        rhumaines?         @relation(fields: [numrh], references: [numrh], onDelete: NoAction, onUpdate: NoAction, map: "fk_connecterrh2")
  operationrecharg operationrecharg[]
  recuperer        recuperer[]

  @@index([numclient], map: "fk_connectercli")
  @@index([numrh], map: "fk_connecterrh2")
}

model contenir {
  numservice       Int
  id_detailservice BigInt
  tarif_effectif   Int?
  services         services       @relation(fields: [numservice], references: [numservice], onDelete: NoAction, onUpdate: NoAction, map: "fk_contenir")
  detailservices   detailservices @relation(fields: [id_detailservice], references: [id_detailservice], onDelete: NoAction, onUpdate: NoAction, map: "fk_contenir2")

  @@id([numservice, id_detailservice])
  @@index([id_detailservice], map: "fk_contenir2")
}

model contenirclauses {
  id_contrat BigInt
  idclauses  Int
  contrats   contrats @relation(fields: [id_contrat], references: [id_contrat], onDelete: NoAction, onUpdate: NoAction, map: "fk_contenirclauses")
  clauses    clauses  @relation(fields: [idclauses], references: [idclauses], onDelete: NoAction, onUpdate: NoAction, map: "fk_contenirclauses2")

  @@id([id_contrat, idclauses])
  @@index([idclauses], map: "fk_contenirclauses2")
}

model contrats {
  id_contrat      BigInt            @id @default(autoincrement())
  numtypecontrat  Int
  datesign        DateTime?         @db.Date
  contenirclauses contenirclauses[]
  typecontrat     typecontrat       @relation(fields: [numtypecontrat], references: [numtypecontrat], onDelete: NoAction, onUpdate: NoAction, map: "fk_typercontrat")

  @@index([numtypecontrat], map: "fk_typercontrat")
}

model coordonneesgpsbase {
  numcoord      Int      @id @default(autoincrement())
  numrh         Int
  latitudebase  Decimal? @db.Decimal(11, 8)
  longitudebase Decimal? @db.Decimal(11, 8)
  locationHash  String?

  @@index([numrh], map: "fk_localiser")
}

model coordonneesgpstr {
  numcoordonnesgpstr Int       @id @default(autoincrement())
  numrh              Int
  datepostition      DateTime  @default(now()) @db.Timestamp(0)
  longitudetr        Decimal?  @db.Decimal(11, 8)
  lattitudetr        Decimal?  @db.Decimal(11, 8)
  rhumaines          rhumaines @relation(fields: [numrh], references: [numrh], onDelete: NoAction, onUpdate: NoAction, map: "fk_positionner")

  @@index([numrh], map: "fk_positionner")
}

model detailsclientpro {
  numdetailsclipro Int     @id @default(autoincrement())
  numclient        Int
  activite         String? @db.VarChar(25)
  client           client  @relation(fields: [numclient], references: [numclient], onDelete: NoAction, onUpdate: NoAction, map: "fk_detailler")

  @@index([numclient], map: "fk_detailler")
}

model detailservices {
  id_detailservice BigInt     @id @default(autoincrement())
  libdetail        String?    @db.VarChar(255)
  tarif_reel       Int?
  commission       Decimal?   @db.Decimal(10, 0)
  contenir         contenir[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model diplomes {
  numdiplome Int       @id @default(autoincrement())
  nomcourt   String?   @db.VarChar(255)
  intitule   String?   @db.VarChar(255)
  obtenir    obtenir[]
}

model dossier_test_certification {
  id_dossier_test_certification   BigInt @id @default(autoincrement())
  numpasser                       BigInt
  lien_dossier_test_certification String @db.VarChar(255)

  @@index([numpasser], map: "numpasser")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model elemrecup {
  numrec    Int         @id @default(autoincrement())
  mailrecuo DateTime?   @db.DateTime(0)
  telrecup  String?     @db.VarChar(255)
  recuperer recuperer[]
}

model etredisponible {
  numjour   Int
  numrh     Int
  heured    DateTime? @db.Time(0)
  heuref    DateTime? @db.Time(0)
  jours     jours     @relation(fields: [numjour], references: [numjour], onDelete: NoAction, onUpdate: NoAction, map: "fk_etredisponible")
  rhumaines rhumaines @relation(fields: [numrh], references: [numrh], onDelete: NoAction, onUpdate: NoAction, map: "fk_etredisponible2")

  @@id([numjour, numrh])
  @@index([numrh], map: "fk_etredisponible2")
}

model exiger {
  numcompetence Int
  numservice    Int
  competences   competences @relation(fields: [numcompetence], references: [numcompetence], onDelete: NoAction, onUpdate: NoAction, map: "fk_exiger")
  services      services    @relation(fields: [numservice], references: [numservice], onDelete: NoAction, onUpdate: NoAction, map: "fk_exiger2")

  @@id([numcompetence, numservice])
  @@index([numservice], map: "fk_exiger2")
}

model exigerpieces {
  numpiece       Int
  numservice     Int
  piecesrequises piecesrequises @relation(fields: [numpiece], references: [numpiece], onDelete: NoAction, onUpdate: NoAction, map: "fk_exigerpieces")
  services       services       @relation(fields: [numservice], references: [numservice], onDelete: NoAction, onUpdate: NoAction, map: "fk_exigerpieces2")

  @@id([numpiece, numservice])
  @@index([numservice], map: "fk_exigerpieces2")
}

model facture {
  numfact    Int         @id @default(autoincrement())
  numservice Int
  datefact   DateTime?   @db.Date
  libfact    String?     @db.VarChar(255)
  services   services    @relation(fields: [numservice], references: [numservice], onDelete: NoAction, onUpdate: NoAction, map: "fk_facturer2")
  reglement  reglement[]

  @@index([numservice], map: "fk_facturer2")
}

model forfait {
  numforfait Int      @id @default(autoincrement())
  montantf   Decimal? @db.Decimal(9, 0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model groupemetiers {
  numgroupe Int     @id @default(autoincrement())
  libgroup  String? @db.VarChar(255)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model historiqueemploi {
  numhistorique Int       @id @default(autoincrement())
  numrh         Int
  emploi        String?   @db.VarChar(255)
  entreprise    String?   @db.VarChar(255)
  dateemploi    DateTime? @db.Date
  datefinemploi DateTime? @db.Date
  rhumaines     rhumaines @relation(fields: [numrh], references: [numrh], onDelete: NoAction, onUpdate: NoAction, map: "fk_histo")

  @@index([numrh], map: "fk_histo")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model jours {
  numjour        Int              @id @default(autoincrement())
  nomjour        String?          @db.VarChar(255)
  etredisponible etredisponible[]
}

model metiers {
  nummetier   Int           @id @default(autoincrement())
  numgroupe   Int
  libmetier   String?       @db.VarChar(255)
  metierIcon  String?       @db.VarChar(255)
  avoirmetier avoirmetier[]

  @@index([numgroupe], map: "fk_grouper")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mode_reclammation {
  id_mode_reclammation Int            @id @default(autoincrement())
  libmoderecla         String?        @db.VarChar(255)
  reclammation         reclammation[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mode_reglement {
  nummode    Int         @id @default(autoincrement())
  libmodereg String?     @db.VarChar(255)
  reglement  reglement[]
}

model obtenir {
  numdiplome Int
  numrh      Int
  anneeobt   DateTime? @db.Date
  mention    String?   @db.VarChar(255)
  diplomes   diplomes  @relation(fields: [numdiplome], references: [numdiplome], onDelete: NoAction, onUpdate: NoAction, map: "fk_obtenir")
  rhumaines  rhumaines @relation(fields: [numrh], references: [numrh], onDelete: NoAction, onUpdate: NoAction, map: "fk_obtenir2")

  @@id([numdiplome, numrh])
  @@index([numrh], map: "fk_obtenir2")
}

model operationrecharg {
  numrechargement                                     Int        @id @default(autoincrement())
  numcompte                                           Int
  numcartegopaxe                                      Int
  daterech                                            DateTime?  @db.DateTime(0)
  statusrech                                          String?    @db.VarChar(255)
  cartegpx_cartegpx_numrechargementTooperationrecharg cartegpx[] @relation("cartegpx_numrechargementTooperationrecharg")
  compte                                              compte     @relation(fields: [numcompte], references: [numcompte], onDelete: NoAction, onUpdate: NoAction, map: "fk_crediter")
  cartegpx_operationrecharg_numcartegopaxeTocartegpx  cartegpx   @relation("operationrecharg_numcartegopaxeTocartegpx", fields: [numcartegopaxe], references: [numcartegopaxe], onDelete: NoAction, onUpdate: NoAction, map: "fk_recharger")

  @@index([numcompte], map: "fk_crediter")
  @@index([numcartegopaxe], map: "fk_recharger")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model organisme {
  numorganisme   Int              @id @default(autoincrement())
  nomorganisme   String?          @db.VarChar(255)
  certifications certifications[]
}

model passer {
  numpasser     BigInt   @id @default(autoincrement())
  numtestcertif Int
  numrh         Int
  statustest    String   @db.VarChar(15)
  numservice    Int
  datepasser    DateTime @db.Date

  @@index([numservice], map: "numservice")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model pays {
  numpays      Int     @id @default(autoincrement())
  nompays      String? @db.VarChar(255)
  codepays     String? @db.VarChar(255)
  ip_pays      String? @db.Char(255)
  drapeau_pays String? @db.Char(255)
}

model photo {
  numphoto   Int      @id @default(autoincrement())
  numservice Int
  lienphoto  String?  @db.VarChar(255)
  services   services @relation(fields: [numservice], references: [numservice], onDelete: NoAction, onUpdate: NoAction, map: "fk_afficher")

  @@index([numservice], map: "fk_afficher")
}

model piecesrequises {
  numpiece     Int            @id @default(autoincrement())
  numtypepiece Int
  libellepiece String?        @db.VarChar(25)
  refpiece     String?        @db.VarChar(25)
  orignale     String?        @db.VarChar(15)
  exigerpieces exigerpieces[]
  typepieces   typepieces     @relation(fields: [numtypepiece], references: [numtypepiece], onDelete: NoAction, onUpdate: NoAction, map: "fk_etredetype")

  @@index([numtypepiece], map: "fk_etredetype")
}

model pointer {
  numrh         Int
  numservice    Int
  date_pointage DateTime? @db.Date
  heure_arrivee DateTime? @db.Time(0)
  heure_fin     DateTime? @db.Time(0)
  rhumaines     rhumaines @relation(fields: [numrh], references: [numrh], onDelete: NoAction, onUpdate: NoAction, map: "fk_pointer")
  services      services  @relation(fields: [numservice], references: [numservice], onDelete: NoAction, onUpdate: NoAction, map: "fk_pointer2")

  @@id([numrh, numservice])
  @@index([numservice], map: "fk_pointer2")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reclammation {
  id_reclammation      BigInt            @id @default(autoincrement())
  numclient            Int
  id_mode_reclammation Int
  libelle_reclammation String?           @db.VarChar(255)
  date_reclammation2   DateTime?         @db.Date
  heure_reclammation2  DateTime?         @db.Time(0)
  action_finale        String?           @db.Text
  adresser             adresser[]
  mode_reclammation    mode_reclammation @relation(fields: [id_mode_reclammation], references: [id_mode_reclammation], onDelete: NoAction, onUpdate: NoAction, map: "fk_avoir")
  client               client            @relation(fields: [numclient], references: [numclient], onDelete: NoAction, onUpdate: NoAction, map: "fk_faire")

  @@index([id_mode_reclammation], map: "fk_avoir")
  @@index([numclient], map: "fk_faire")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model recuperer {
  numcompte Int
  numrec    Int
  daterecup DateTime  @db.DateTime(0)
  motif     String?   @db.VarChar(255)
  compte    compte    @relation(fields: [numcompte], references: [numcompte], onDelete: NoAction, onUpdate: NoAction, map: "fk_recuperer")
  elemrecup elemrecup @relation(fields: [numrec], references: [numrec], onDelete: NoAction, onUpdate: NoAction, map: "fk_recuperer2")

  @@id([numcompte, numrec])
  @@index([numrec], map: "fk_recuperer2")
}

model reglement {
  id_reglement      BigInt         @id @default(autoincrement())
  numfact           Int
  nummode           Int
  date_reglement    DateTime?      @db.Date
  heure_reglement   DateTime?      @db.Time(0)
  montant_reglement Int?
  facture           facture        @relation(fields: [numfact], references: [numfact], onDelete: NoAction, onUpdate: NoAction, map: "fk_payer")
  mode_reglement    mode_reglement @relation(fields: [nummode], references: [nummode], onDelete: NoAction, onUpdate: NoAction, map: "fk_utiliser")

  @@index([numfact], map: "fk_payer")
  @@index([nummode], map: "fk_utiliser")
}

model rhumaines {
  numrh                Int                @id @default(autoincrement())
  numcompte            Int
  numtyperh            Int
  numville             Int
  coordonneesrh        Decimal?           @db.Decimal(11, 8)
  nom2                 String?            @db.VarChar(255)
  nomcomplet2          String?            @db.VarChar(255)
  photorh              String?            @db.VarChar(255)
  emailrh              String?            @unique(map: "emailrh") @db.VarChar(255)
  telephonerh          String?            @unique(map: "telephonerh") @db.VarChar(255)
  ratingrh             Int?               @db.TinyInt
  codeqr               String?            @db.VarChar(255)
  status               String?            @db.VarChar(255)
  cniid                Int                @unique(map: "cniid")
  adminId              Int
  date_inscription_rh  DateTime           @db.Date
  heure_inscription_rh DateTime           @db.Time(0)
  compteId             Int
  affecter             affecter[]
  avoircompetences     avoircompetences[]
  avoirmetier          avoirmetier[]
  certifier            certifier[]
  commentairesrh       commentairesrh[]
  compte               compte[]
  coordonneesgpstr     coordonneesgpstr[]
  etredisponible       etredisponible[]
  historiqueemploi     historiqueemploi[]
  obtenir              obtenir[]
  pointer              pointer[]
  ville                ville              @relation(fields: [numville], references: [numville], onDelete: NoAction, onUpdate: NoAction, map: "fk_resider")
  typerh               typerh             @relation(fields: [numtyperh], references: [numtyperh], onDelete: NoAction, onUpdate: NoAction, map: "fk_typer")

  @@index([adminId], map: "adminId")
  @@index([numcompte], map: "fk_connecterrh")
  @@index([numville], map: "fk_resider")
  @@index([numtyperh], map: "fk_typer")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model serviceinterne {
  id_service Int        @id @default(autoincrement())
  nomservice String?    @db.VarChar(255)
  adresser   adresser[]
}

model services {
  numservice           Int            @id @default(autoincrement())
  intitule_service     String         @db.VarChar(255)
  numfact              Int?
  id_contrat           BigInt
  numclient            Int
  numrh                Int
  date_debut_souhaite  DateTime       @db.Date
  date_commande2       DateTime       @db.Date
  heure_commande2      DateTime?      @db.Time(0)
  description          String?        @db.Text
  notationservice      Int?
  commentaire_notation String?        @db.Text
  affecter             affecter[]
  contenir             contenir[]
  exiger               exiger[]
  exigerpieces         exigerpieces[]
  facture              facture[]
  photo                photo[]
  pointer              pointer[]
  client               client         @relation(fields: [numclient], references: [numclient], onDelete: NoAction, onUpdate: NoAction, map: "fk_commander")

  @@index([numrh], map: "fk_accepter")
  @@index([numclient], map: "fk_commander")
  @@index([numfact], map: "fk_facturer")
  @@index([id_contrat], map: "fk_generer")
}

model soldecarte {
  numcompte Int
  datesolde DateTime @db.DateTime(0)
  solde     Decimal? @db.Decimal(9, 2)

  @@id([numcompte, datesolde])
}

model testscertifcation {
  numtestcertif Int     @id @default(autoincrement())
  libelletest   String? @db.VarChar(50)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model typeclient {
  numtypeclient Int      @id @default(autoincrement())
  libtypecli    String?  @db.VarChar(255)
  client        client[]
}

model typecontrat {
  numtypecontrat    Int        @id @default(autoincrement())
  libcourtcontrat   String?    @db.VarChar(255)
  liblongcontrat    String?    @db.VarChar(255)
  lienmodelecontrat String?    @db.VarChar(255)
  contrats          contrats[]
}

model typepieces {
  numtypepiece   Int              @id @default(autoincrement())
  libtypepiece   String?          @db.VarChar(50)
  piecesrequises piecesrequises[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model typerh {
  numtyperh Int         @id @default(autoincrement())
  libtyperh String?     @db.VarChar(255)
  rhumaines rhumaines[]
}

model utilisateur {
  id_utilisateur        BigInt @id @default(autoincrement())
  matricule_utilisateur String @db.VarChar(255)
  nom_utilisateur       String @db.VarChar(255)
  prenom_utilisateur    String @db.VarChar(255)
  tel_utilisateur       String @db.VarChar(255)
  email_utilisateur     String @db.VarChar(255)
  photo_utilisateur     String @db.VarChar(255)
  login_utilisateur     String @db.VarChar(255)
  mot_passe_utilisateur String @db.VarChar(255)
}

model ville {
  numville  Int         @id @default(autoincrement())
  numpays   Int
  nomville  String?     @db.VarChar(255)
  codeville String?     @db.VarChar(255)
  rhumaines rhumaines[]

  @@index([numpays], map: "fk_etreville")
}
